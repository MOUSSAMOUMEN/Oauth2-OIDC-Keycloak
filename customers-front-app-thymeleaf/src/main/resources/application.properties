spring.application.name=customers-thymeleaf
server.port=8081

spring.datasource.url=jdbc:h2:mem:customers-th-db
spring.h2.console.enabled=true

# Google Provider
spring.security.oauth2.client.registration.google.clientId=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.provider.google.user-name-attribute=email

# Github Provider
spring.security.oauth2.client.registration.github.clientId=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.provider.github.user-name-attribute=login

# Keycloak Provider
spring.security.oauth2.client.registration.keycloak.client-name=keycloak
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=${KEYCLOAK_REDIRECT_URI}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.client.provider.keycloak.authorization-uri=${KEYCLOAK_AUTH}
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_AUTH_TOKEN}
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${JWT_JWK_SET_URI}

inventory.service.base.uri=${INVENTORY_SERVICE_BASE_URI}
